name: google app engine deploy
on:
  workflow_dispatch:
  push:
    branches: [trunk]
    paths-ignore:
      - 'microsite/**'
      - '.github/workflows/deploy-microsite.yml'
  pull_request:
    branches: [trunk]
    types: [closed]
    paths-ignore:
      - 'microsite/**'
      - '.github/workflows/deploy-microsite.yml'
# concurrency: ${{ github.workflow || github.run_id }}
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          # This makes Actions fetch all Git history so that Changesets can generate changelogs with the correct commits
          fetch-depth: 0
      - uses: actions/setup-node@v2
        with:
          node-version: '16'
      # Cache every node_modules folder inside the monorepo
      - name: cache all node_modules
        id: cache-modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          # We use both yarn.lock and package.json as cache keys to ensure that changes to local monorepo packages bust the cache.
          key: ${{ runner.os }}-node_modules-${{ hashFiles('yarn.lock', '**/package.json') }}
      - name: find location of global yarn cache
        id: yarn-cache
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: cache global yarn cache
        uses: actions/cache@v2
        if: steps.cache-modules.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: yarn install
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: yarn install
      - name: build-packages
        run: |
          yarn lerna run build --ignore @cloud-carbon-footprint/client --ignore @cloud-carbon-footprint/cli --ignore @cloud-carbon-footprint/create-app --ignore @cloud-carbon-footprint/integration-tests
      - name: build-client
        env:
          REACT_APP_DATE_RANGE_VALUE: ${{ secrets.REACT_APP_DATE_RANGE_VALUE }}
          REACT_APP_DATE_RANGE_TYPE: ${{ secrets.REACT_APP_DATE_RANGE_TYPE }}
          REACT_APP_PREVIOUS_YEAR_OF_USAGE: ${{ secrets.REACT_APP_PREVIOUS_YEAR_OF_USAGE }}
          REACT_APP_GROUP_BY: ${{ secrets.REACT_APP_GROUP_BY }}
          REACT_APP_MINIMAL_DATE_AGE: ${{ secrets.REACT_APP_MINIMAL_DATE_AGE }}
        run: |
          cd packages/client
          chmod +x ./create_client_env_file.sh
          ./create_client_env_file.sh
          yarn build:app
          cd ../..
      - name: build-workspace
        run: |
          yarn lerna run build:workspace
          # replacing local @cloud-carbon-footprint dependencies with a local reference
          yarn lerna run build:update
      - name: zip artifact
        run: zip dist-workspace.zip dist-workspace/* -r
      - uses: actions/upload-artifact@v2
        with:
          name: dist-workspace
          path: dist-workspace.zip
  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    container:
      image: node:16.19-alpine3.17
    environment:
      name: production
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: dist-workspace
      - name: unzip artifact for deployment
        run: unzip dist-workspace.zip
      - name: deploy-production
        env:
          GCLOUD_SERVICE_KEY: ${{ secrets.GCLOUD_SERVICE_KEY }}
          GOOGLE_PROJECT_ID: ${{ secrets.GOOGLE_PROJECT_ID }}
          GOOGLE_DEMO_STORAGE_BUCKET: ${{ secrets.GOOGLE_DEMO_STORAGE_BUCKET }}
        run: |
          apk update && apk add --no-cache python3 py-crcmod bash libc6-compat curl git
          export PATH=$PATH:/root/google-cloud-sdk/bin
          curl -sSL https://sdk.cloud.google.com > /tmp/gcloud-install && bash /tmp/gcloud-install --disable-prompts --install-dir=/root

          cp packages/api/create_server_env_file.sh dist-workspace/packages/api
          cp packages/api/app-production.yaml dist-workspace/packages/api
  
          cp packages/client/app-production.yaml dist-workspace/packages/client

          # We need to set yarn to v1 because App Engine will only install with a yarn.lock file generated from this version.
          yarn set version 1.22.4

          rm yarn.lock
          rm package.json

          cd dist-workspace/packages/api
          # Generate yarn.lock file
          yarn install
          chmod +x ./create_server_env_file.sh
          ./create_server_env_file.sh
          cd ../../..

          # Store service account
          echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json

          # Initialize gcloud CLI
          gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json

          gcloud --quiet config set project $GOOGLE_PROJECT_ID
          
          # Create mock data directory and files
          mkdir packages/client/stub-server/api
          mkdir packages/client/stub-server/api/regions

          node scripts/create-client-mock-data.js

          cd appengine
          chmod +x ./deploy-production.sh
          ./deploy-production.sh
          cd ..
